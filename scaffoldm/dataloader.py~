#!/usr/bin/env python
###############################################################################
#                                                                             #
#    dataloader.py                                                            #
#                                                                             #
#    A class for loading bamm files and contigs (FASTA)                       #
#                                                                             #
#    Copyright (C) Alexander Baker                                            #
#                                                                             #
###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Alexander Baker"
__copyright__ = "Copyright 2015"
__credits__ = ["Alexander Baker"]
__license__ = "GPLv3"
__maintainer__ = "Alexander Baker"
__email__ = "Alexander.baker@uqconnect.edu.au"

###############################################################################
###############################################################################
###############################################################################
###############################################################################

# system includes

# local includes

###############################################################################
###############################################################################
###############################################################################
###############################################################################
# Few goals in this file:
# Load bamms - use BamM to give cov and link information
# be able to extract links and coverage
# Check at least some contigs in contig file are present in bam
# if not abort - indicate they don't match
# 
###############################################################################
class DataLoader(object):
    """Utilities wrapper"""
    def __init__(self,
                 cov=False,
                 links=True,
                 bammloc,
                 contigloc):
	####
	# Variables:
	# coverage - binary - store coverage info
	# links - binary - store links info
	# bammloc - location of bamm file
	# contig loc - location of contig files
	####
	# Attributes
	# One for all var (same name)
	# 
	#
	#
	#
	####
        self.bammloc=bammloc
        if cov:
            self.cov=1
	else:
	    self.cov=0
        if links:
            self.links=1
	else:
	    self.links=0
        self.bammloc=bammloc
	self.contigloc=contigloc

#### Not storing contig or bamm in memory - accessing on call
    def getlinks(self,contig1,contig2):
	##Does work - extracts linking reads and passes them out
    def getcov(self,contig1):
	##Does work -extracts and returns contig coverage info
	##maybe allow for separating on mutiply mapped librariesvia BamM
    def extractcontigs(self):
        ###Just assigns contigs file via contigloc.
	###Temporary just for use when making scaffold
    def storebamm(self):
	##Not likely to be used much - emulate/use BamM structure
     

    def runCommand(self, cmd):
        """Run a command and take care of stdout

        expects 'cmd' to be a string like "foo -b ar"

        returns (stdout, stderr)
        """
        from multiprocessing import Pool
        from subprocess import Popen, PIPE

        p = Popen(cmd.split(' '), stdout=PIPE)
        return p.communicate()

    def parseFile(self, filename):
        """parse a file"""
        import sys
        try:
            with open(filename, "r") as fh:
                for line in fh:
                    print line
        except:
            print "Error opening file:", filename, sys.exc_info()[0]
            raise 
